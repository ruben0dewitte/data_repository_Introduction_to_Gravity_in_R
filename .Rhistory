mutate(pair_id = cur_group_id())
## construct exporter output and importer expenditure
x_app1 = x_app1 %>%
group_by(exporter,year) %>%
mutate(Y_it = sum(trade)) %>%
group_by(importer,year) %>%
mutate(E_jt = sum(trade))
## calculate logs
x_app1 = x_app1 %>%
mutate(across(c(trade,Y_it,E_jt,dist),~log(.x),.names="ln_{.col}"))
## Estimation
fit_ols = feols(ln_trade ~ ln_dist + cntg + lang + clny + ln_Y_it + ln_E_jt,
data = x_app1 %>%
filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_ols)
# 2. Proxy for multilateral resistance ------------------------------------
## Calculate remoteness indices
x_app1 = x_app1 %>%
group_by(year) %>%
mutate(Y_t = sum(Y_it), E_t = sum(E_jt)) %>%
group_by(exporter, year) %>%
mutate(remoteness_exp = sum(dist /(E_jt / E_t))) %>%
group_by(importer, year) %>%
mutate(remoteness_imp = sum(dist / (Y_it / Y_t))) %>%
mutate(ln_remoteness_exp = log(remoteness_exp),
ln_remoteness_imp = log(remoteness_imp))
## Estimation
fit_remoteness = feols(ln_trade ~ ln_dist + cntg + lang + clny + ln_Y_it +
ln_E_jt + ln_remoteness_exp + ln_remoteness_imp,
data = x_app1 %>% filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_remoteness)
# 3. Fixed Effects -----------------------------------------------------------
## Create fixed effects
x_app1 = x_app1 %>%
unite("fe_exp_year",c(exporter,year),sep="_",remove=FALSE) %>%
unite("fe_imp_year",c(importer,year),sep="_",remove=FALSE)
## Estimation
fit_fixedeffects = feols(ln_trade ~ ln_dist + cntg + lang + clny |
fe_exp_year + fe_imp_year,
data = x_app1 %>% filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_fixedeffects)
# 4. Fit gravity with PPML and fixed effects -----------------------------
fit_poisson = fepois(trade ~ ln_dist + cntg + lang + clny |
fe_exp_year + fe_imp_year,
data = x_app1 %>% filter(exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_poisson)
length(unique(x_app1$fe_exp_year))
ls(x_app1)
length(unique(x_app1$exporter))
length(unique(x_app1$importer))
length(unique(x_app1$year))
69*6
?dependencies?
?dependencies
test = dependencies
test = dependencies()
test = renv::dependencies()
View(test)
View(test)
renv::snapshot()
renv::upgrade()
renv::upgrade()
renv::snapshot()
?renv
library(here) #easy file referencing, root is set at project root
source(here("code","04_dataprep.R"))
##############################################################
# Data preparation
##############################################################
# SETUP -------------------------------------------------------------------
# Load packages
library(tidyverse)
library(here) # easy file referencing, root is set at project root
library(fixest) # perform estimations with multiple fixed-effects
library(flextable) # Output tables to word
library(huxtable) # Output tables
# Load data ---------------------------------------------------------------
x = read_csv(here("output","agtpa_applications.csv"))
# 1. Naive Gravity -----------------------------------------------------------
## Select necessary data
x_app1 = x %>%
filter(year %in% seq(1986, 2006, 4))
## Construct symmetric pair id's
x_app1 = x_app1 %>%
mutate(pair = paste(pmin(exporter,importer),pmax(exporter,importer),sep = "_")) %>%
group_by(pair) %>%
mutate(pair_id = cur_group_id())
## construct exporter output and importer expenditure
x_app1 = x_app1 %>%
group_by(exporter,year) %>%
mutate(Y_it = sum(trade)) %>%
group_by(importer,year) %>%
mutate(E_jt = sum(trade))
## calculate logs
x_app1 = x_app1 %>%
mutate(across(c(trade,Y_it,E_jt,dist),~log(.x),.names="ln_{.col}"))
## Estimation
fit_ols = feols(ln_trade ~ ln_dist + cntg + lang + clny + ln_Y_it + ln_E_jt,
data = x_app1 %>%
filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_ols)
# 2. Proxy for multilateral resistance ------------------------------------
## Calculate remoteness indices
x_app1 = x_app1 %>%
group_by(year) %>%
mutate(Y_t = sum(Y_it), E_t = sum(E_jt)) %>%
group_by(exporter, year) %>%
mutate(remoteness_exp = sum(dist /(E_jt / E_t))) %>%
group_by(importer, year) %>%
mutate(remoteness_imp = sum(dist / (Y_it / Y_t))) %>%
mutate(ln_remoteness_exp = log(remoteness_exp),
ln_remoteness_imp = log(remoteness_imp))
## Estimation
fit_remoteness = feols(ln_trade ~ ln_dist + cntg + lang + clny + ln_Y_it +
ln_E_jt + ln_remoteness_exp + ln_remoteness_imp,
data = x_app1 %>% filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_remoteness)
# 3. Fixed Effects -----------------------------------------------------------
## Create fixed effects
x_app1 = x_app1 %>%
unite("fe_exp_year",c(exporter,year),sep="_",remove=FALSE) %>%
unite("fe_imp_year",c(importer,year),sep="_",remove=FALSE)
## Estimation
fit_fixedeffects = feols(ln_trade ~ ln_dist + cntg + lang + clny |
fe_exp_year + fe_imp_year,
data = x_app1 %>% filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_fixedeffects)
# 4. Fit gravity with PPML and fixed effects -----------------------------
fit_poisson = fepois(trade ~ ln_dist + cntg + lang + clny |
fe_exp_year + fe_imp_year,
data = x_app1 %>% filter(exporter != importer),
vcov = cluster ~ pair_id)
summary(fit_poisson)
# Overview ----------------------------------------------------------------
tab_traditional_gravity =  huxreg(" " = fit_ols,
"Remoteness" = fit_remoteness,
"Fixed Effects" = fit_fixedeffects,
"Fixed Effects " = fit_poisson,
coefs = c("Intercept" = "(Intercept)",
"Log Distance" = "ln_dist",
"Contiguity" = "cntg",
"Common language" = "lang",
"Colony" = "clny",
"Log output" = "ln_Y_it",
"Log expenditure" = "ln_E_jt",
"Exporter remoteness" = "ln_remoteness_exp",
"Importer remoteness" = "ln_remoteness_imp"),
stars = NULL,
note = "Notes: Statistics based on author's calculations. All estimates are obtained with data for the years 1986, 1990, 1994, 1998, 2002, and 2006. Columns (1)-(3) use the OLS estimator. Column (1) does not control for the multilateral resistances. Column (2) uses remoteness indexes to control for multilateral resistances. Column (3) uses importer-time and exporter-time fixed effects, whose estimates are omitted for brevity, to control for multilateral resistances. Finally, column (4) employs the PPML estimator. Standard errors are clustered by country pair and are reported in parentheses."
) %>%
insert_row("","(1) OLS", "(2) OLS", "(3) OLS", " (4) PPML", after = 0) %>%
set_top_border(1,everywhere,1) %>%
set_align(1, everywhere, "center") %>%
insert_row(c("Exporter-time fixed effects", "No", "No", "Yes", "Yes"),
after = 24) %>%
insert_row(c("Importer-time fixed effects", "No", "No", "Yes", "Yes"),
after = 25) %>%
set_number_format(23:24, everywhere, 0) %>%
set_tb_borders(24:25,everywhere,0) %>%
set_tb_padding(0) %>%
set_col_width(c(0.3,rep(0.7/4,4))) %>%
set_align(everywhere,-1,"center") %>%
set_caption("Traditional Gravity Estimates") %>%
set_label("tab_traditional_gravity")
width(tab_traditional_gravity) = 1 #Set relative table width for use in documents
## Export table to latex
cat(to_latex(tab_traditional_gravity),file=here("output","tables","tab_traditional_gravity.tex"))
## Export table to word
tab_traditional_gravity_docx = as_flextable(tab_traditional_gravity)
save_as_docx(tab_traditional_gravity_docx, path = here("output","tables","tab_traditional_gravity.docx"))
##############################################################
# Data preparation
##############################################################
# SETUP -------------------------------------------------------------------
# Load packages
library(tidyverse)
library(here) #easy file referencing, root is set at project root
library(fixest) # perform estimations with multiple fixed-effects
library(flextable) # Output tables to word
library(huxtable) # Outupt tables
# Load data ---------------------------------------------------------------
x = read_csv(here("output","agtpa_applications.csv"))
# 1a. OLS Gravity -----------------------------------------------------------
## Select necessary data
x_app2 = x %>%
filter(year %in% seq(1986, 2006, 4))
## Construct symmetric pair id's
x_app2 = x_app2 %>%
mutate(pair = paste(pmin(exporter,importer),pmax(exporter,importer),sep = "_")) %>%
group_by(pair) %>%
mutate(pair_id = cur_group_id())
## calculate logs
x_app2 = x_app2 %>%
mutate(across(c(trade,dist),~log(.x),.names="ln_{.col}"))
## Create fixed effects
x_app2 = x_app2 %>%
unite("fe_exp_year",c(exporter,year),sep="_",remove=FALSE) %>%
unite("fe_imp_year",c(importer,year),sep="_",remove=FALSE)
## Create a dummy for intra-national trade
## Create time-specific international distance variables
x_app2 = x_app2 %>%
mutate(ln_dist_year = paste0("ln_dist_",year),
ln_dist_copy = ln_dist) %>%
pivot_wider(names_from="ln_dist_year",
values_from="ln_dist_copy",
values_fill = 0)
## Estimation
distance_ols = feols(ln_trade ~ ln_dist_1986 + ln_dist_1990 + ln_dist_1994 +
ln_dist_1998 + ln_dist_2002 + ln_dist_2006 +
cntg + lang + clny |
fe_exp_year + fe_imp_year,
data = x_app2 %>% filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(distance_ols)
# 1b. PPML Gravity ------------------------------------------------------------
distance_poisson = fepois(trade ~ ln_dist_1986 + ln_dist_1990 + ln_dist_1994 +
ln_dist_1998 + ln_dist_2002 + ln_dist_2006 +
cntg + lang + clny |
fe_exp_year + fe_imp_year,
data = x_app2 %>% filter(exporter != importer),
vcov = cluster ~ pair_id)
summary(distance_poisson)
# 2. Internal distance solution for the distance puzzle -----------------
## Create dummy variable for intra-national trade
## Create intra-national distance variable
## Set international distance variable to zero for intra-national trade to avoid overlap
x_app2 = x_app2 %>%
mutate(D_intra = ifelse(importer == exporter, 1, 0),
ln_dist_intra = ln_dist * D_intra,
across(ln_dist_1986:ln_dist_2006, ~ ifelse(D_intra==1,0,.x)))
distance_poisson_intra = fepois(trade ~ ln_dist_1986 + ln_dist_1990 + ln_dist_1994 +
ln_dist_1998 + ln_dist_2002 + ln_dist_2006 +
cntg + lang + clny + ln_dist_intra |
fe_exp_year + fe_imp_year,
data = x_app2,
vcov = cluster ~ pair_id)
summary(distance_poisson_intra)
# 3. Internal distance and home bias solution for the distance puzzle --------
distance_poisson_intra_home = fepois(trade ~ ln_dist_1986 + ln_dist_1990 + ln_dist_1994 +
ln_dist_1998 + ln_dist_2002 + ln_dist_2006 +
cntg + lang + clny + ln_dist_intra + D_intra |
fe_exp_year + fe_imp_year,
data = x_app2,
vcov = cluster ~ pair_id)
summary(distance_poisson_intra_home)
# 4. Fixed effects solution for the "distance puzzle" ---------------------
## Specify country-specific intra-national trade dummies
x_app2 = x_app2 %>%
mutate(D_trade_ii = ifelse(exporter==importer,exporter,"international"))
distance_poisson_intra_fe = fepois(trade ~ ln_dist_1986 + ln_dist_1990 + ln_dist_1994 +
ln_dist_1998 + ln_dist_2002 + ln_dist_2006 +
cntg + lang + clny |
fe_exp_year + fe_imp_year + D_trade_ii,
data = x_app2,
vcov = cluster ~ pair_id)
summary(distance_poisson_intra_fe)
# Overview ------------------------------------------------------------------
## Overview
tab_distance_gravity =  huxreg("(1) OLS" = distance_ols,
"(2) PPML" = distance_poisson,
"(3) INTRA" = distance_poisson_intra,
"(4) BRDR" = distance_poisson_intra_home,
"(5) FEs" = distance_poisson_intra_fe,
coefs = c("Log distance 1986" = "ln_dist_1986",
"Log distance 1990" = "ln_dist_1990",
"Log distance 1994" = "ln_dist_1994",
"Log distance 1998" = "ln_dist_1998",
"Log distance 2002" = "ln_dist_2002",
"Log distance 2006" = "ln_dist_2006",
"Contiguity" = "cntg",
"Colony" = "clny",
"Common language" = "lang",
"Log intra-national distance" = "ln_dist_intra",
"Intra-national trade dummy" = "D_intra"),
stars = NULL,
note = "Notes: All estimates are obtained with data for the years 1986, 1990, 1994, 1998, 2002, and 2006, and use exporter-time and importer-time fixed effects. The estimates of the fixed effects are omitted for brevity. Columns (1) and (2) use data on international trade flows only. Column (1) employs the OLS estimator and column (2) uses the PPML estimator. Column (3) adds internal trade observations and uses intra-national distance as an additional covariate. Column (4) adds an indicator covariate for international trade. Finally, column (5) uses country-specific dummies for intra-national trade. Standard errors are clustered by country pair and are reported in parentheses. The bottom panel of the table reports the percentage change in the estimates of the effects of bilateral distance between 1986 and 2006.") %>%
insert_row(c("Intra-national trade", "No", "No", "Yes", "Yes","Yes"),
after = 27) %>%
insert_row(c("Country-specific intra-national fixed effects", "No", "No", "No", "No", "Yes"),
after = 28) %>%
set_number_format(26:27, everywhere, 0) %>%
set_tb_borders(26:28,everywhere,0) %>%
set_tb_padding(0) %>%
set_col_width(c(0.35,rep(0.65/5,5))) %>%
set_align(everywhere,-1,"center") %>%
set_caption("A simple solution to the ``distance puzzle'' in trade") %>%
set_label("tab_distance_gravity")
tab_distance_gravity[26,1] = c("logLik (in thousands)")
tab_distance_gravity[26,-1] = as.numeric(tab_distance_gravity[26,-1])/1000
tab_distance_gravity[27,1] = c("AIC (in thousands)")
tab_distance_gravity[27,-1] = as.numeric(tab_distance_gravity[27,-1])/1000
width(tab_distance_gravity) = 1 #Set relative table width for use in documents
## Export table to latex
cat(to_latex(tab_distance_gravity),file=here("output","tables","tab_distance_gravity.tex"))
## Export table to word
tab_distance_gravity_docx = as_flextable(tab_distance_gravity)
save_as_docx(tab_distance_gravity_docx, path = here("output","tables","tab_distance_gravity.docx"))
##############################################################
# Data preparation
##############################################################
# SETUP -------------------------------------------------------------------
# Load packages
library(tidyverse)
library(here) #easy file referencing, root is set at project root
library(fixest) # perform estimations with multiple fixed-effects
library(flextable) # Output tables to word
library(huxtable) # Outupt tables
## Source user-written functions
source(here("code","02_toolbox.R"))
##############################################################
# Data preparation
##############################################################
# SETUP -------------------------------------------------------------------
# Load packages
library(tidyverse)
library(here) #easy file referencing, root is set at project root
library(fixest) # perform estimations with multiple fixed-effects
library(flextable) # Output tables to word
library(huxtable) # Outupt tables
## Source user-written functions
source(here("code","03_toolbox.R"))
## Load global variables
load(here("output","globalvariables.Rdata"))
# Load data ---------------------------------------------------------------
x = read_csv(here("output","agtpa_applications.csv"))
# 1a. Traditional Estimates (OLS) -----------------------------------------------------------
## Select necessary data
x_app3 = x %>%
filter(year %in% seq(1986, 2006, 4))
## Construct symmetric pair id's
x_app3 = x_app3 %>%
mutate(pair = paste(pmin(exporter,importer),pmax(exporter,importer),sep = "_")) %>%
group_by(pair) %>%
mutate(pair_id = cur_group_id())
## calculate logs
x_app3 = x_app3 %>%
mutate(across(c(trade,dist),~log(.x),.names="ln_{.col}"))
## Create fixed effects
x_app3 = x_app3 %>%
unite("fe_exp_year",c(exporter,year),sep="_",remove=FALSE) %>%
unite("fe_imp_year",c(importer,year),sep="_",remove=FALSE)
## Specify country-specific intra-national trade dummies
x_app3 = x_app3 %>%
mutate(D_trade_ii = ifelse(exporter==importer,exporter,"international"))
#Estimation
rta_ols = feols(ln_trade ~ ln_dist + cntg + lang + clny + rta |
fe_exp_year + fe_imp_year,
data = x_app3 %>%
filter(trade > 0 & exporter != importer),
vcov = cluster ~ pair_id)
summary(rta_ols)
# 1b. Traditional estimation (PPML) -------------------------------------------
rta_poisson = fepois(trade ~ ln_dist + cntg + lang + clny + rta |
fe_exp_year + fe_imp_year,
data = x_app3 %>%
filter(exporter != importer),
vcov = cluster ~ pair_id)
summary(rta_poisson)
# 2. Allowing for trade-diversion from domestic sales   -------------------
## Create international border dummy variable
x_app3 = x_app3 %>%
mutate(intl_brdr = ifelse(exporter == importer, as.character(pair_id), "international"))
## Estimation
rta_poisson_intra = fepois(trade ~ ln_dist + cntg + lang + clny + rta |
fe_exp_year + fe_imp_year + D_trade_ii,
data = x_app3,
vcov = cluster ~ pair_id)
summary(rta_poisson_intra)
# 3. Addressing potential endogeneity of RTAs------------------------------
## Estimation
rta_endo = fepois(trade ~  rta |
fe_exp_year + fe_imp_year + pair_id,
data = x_app3,
vcov = cluster ~ pair_id)
summary(rta_endo)
# 4. Testing for potential "reverse causality" --------
# ## Identify future RTAs
# x_app3 = x_app3 %>%
#   group_by(exporter,importer) %>%
#   mutate(rta_lead4 = tlead(rta,n=4,along_with = year))
## Estimation
rta_lead = fepois(trade ~  rta + rta_lead4 |
fe_exp_year + fe_imp_year + pair_id,
data = x_app3,
vcov = cluster ~ pair_id)
summary(rta_lead)
# 5. Allowing for potential non-linear and phasing-in effects --------
# # Identify past RTAs
# x_app3 = x_app3 %>%
#   group_by(exporter,importer) %>%
#   mutate(rta_lag4 = tlag(rta,n=4,along_with = year),
#          rta_lag8 = tlag(rta,n=8,along_with = year),
#          rta_lag12 = tlag(rta,n=12,along_with = year))
rta_lags = fepois(trade ~  rta + rta_lag4 + rta_lag8 + rta_lag12 |
fe_exp_year + fe_imp_year + pair_id,
data = x_app3,
vcov = cluster ~ pair_id)
summary(rta_lags)
#Visualise the evolution over time
coeff_rta_lags = coefficients(rta_lags)
coeff_rta_lags = cbind.data.frame(coeff_rta_lags, confint(rta_lags))
colnames(coeff_rta_lags) = c("coeff", "lower_ci", "upper_ci")
coeff_rta_lags = coeff_rta_lags %>%
rownames_to_column(var="variable") %>%
mutate(variable = factor(variable,levels = unique(variable), ordered=TRUE)) # Provide order for x-axis later
fig_rta_evo = ggplot(coeff_rta_lags) +
geom_point(aes(x=variable,y=coeff)) +
geom_line(aes(x=variable,y=coeff,group=1),linetype=linetypes[2]) + # the data was grouped by variable, to draw a line accross variables we need to specify a homogenous group, for instance 1
geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci,x=variable), width=0.2) +
theme_minimal() +
theme(panel.grid = element_blank(),axis.title.y=element_text(angle = 0, vjust = 0.5)) +
ylab("Coefficients") +
xlab("Variable")
fig_rta_evo
ggsave(file=here("output","figures","fig_rta_evo.png"), plot=fig_rta_evo,
height=20/1.7,units="cm")
# 6. Addressing globalization effects -------------------------------------
## Create time-specific international border variables
x_app3 = x_app3 %>%
mutate(D_inter = ifelse(importer != exporter, 1, 0),
intl_brdr_year = paste0("intl_brdr_",year)) %>%
pivot_wider(names_from="intl_brdr_year",
values_from="D_inter",
values_fill = 0)
rta_glob = fepois(trade ~  rta + rta_lag4 + rta_lag8 + rta_lag12 +
intl_brdr_1986 + intl_brdr_1990 + intl_brdr_1994 +
intl_brdr_1998 + intl_brdr_2002|
fe_exp_year + fe_imp_year + pair_id,
data = x_app3,
vcov = cluster ~ pair_id)
summary(rta_glob)
# Overview ------------------------------------------------------------------
## Overview
tab_glob_gravity =  huxreg("(1) OLS" = rta_ols,
"(2) PPML" = rta_poisson,
"(3) INTRA" = rta_poisson_intra,
"(4) ENDG" = rta_endo,
"(5) LEAD" = rta_lead,
"(6) PHSNG" = rta_lags,
"(7) GLBZN" = rta_glob,
coefs = c("Log distance" = "ln_dist",
"Contiguity" = "cntg",
"Colony" = "clny",
"Common language" = "lang",
"RTA" = "rta",
"RTA(t+4)" = "rta_lead4",
"RTA(t-4)" = "rta_lag4",
"RTA(t-8)" = "rta_lag8",
"RTA(t-12)" = "rta_lag12",
"Int. border 1986" = "intl_brdr_1986",
"Int. border 1990" = "intl_brdr_1990",
"Int. border 1994" = "intl_brdr_1994",
"Int. border 1998" = "intl_brdr_1998",
"Int. border 2002" = "intl_brdr_2002"),
stars = NULL,
note = "Notes: All estimates are obtained with data for the years 1986, 1990, 1994, 1998, 2002, and 2006, and use exporter-time and importer-time fixed effects. The estimates of the fixed effects are omitted for brevity. Columns (1) and (2) use data on international trade flows only. Column (1) applies the OLS estimator and column (2) uses the PPML estimator. Column (3) adds intra-national trade observations and uses country-specific dummies for internal trade. Column (4) adds pair fixed effects. The estimates of the pair fixed effects are omitted for brevity. Column (5) introduces RTA lead. Column (6) allows for phasing-in effects of RTAs. Finally, column (7) accounts for the effects of globalization. Standard errors are clustered by country pair and are reported in parentheses.") %>%
insert_row(c("Intra-national trade", "No", "No", "Yes", "Yes","Yes", "Yes", "Yes"),after = 33) %>%
set_number_format(32:33, everywhere, 0) %>%
set_tb_borders(33,everywhere,0) %>%
set_tb_padding(0) %>%
set_col_width(c(0.3,rep(0.7/7,7))) %>%
set_align(everywhere,-1,"center") %>%
set_caption("Estimating the Effects of Regional Trade Agreements") %>%
set_label("tab_glob_gravity")
tab_glob_gravity[32,1] = c("logLik (in thousands)")
tab_glob_gravity[32,-1] = as.numeric(tab_glob_gravity[32,-1])/1000
tab_glob_gravity[33,1] = c("AIC (in thousands)")
tab_glob_gravity[33,-1] = as.numeric(tab_glob_gravity[33,-1])/1000
width(tab_glob_gravity) = 1 #Set relative table width for use in documents
## Export table to latex
cat(to_latex(tab_glob_gravity),file=here("output","tables","tab_glob_gravity.tex"))
## Export table to word
tab_glob_gravity_docx = as_flextable(tab_glob_gravity)
save_as_docx(tab_glob_gravity_docx, path = here("output","tables","tab_glob_gravity.docx"))
?lag
x_app3 = x_app3 %>%
group_by(exporter,importer) %>%
mutate(test = lead(rta,n=4,order_by = year))
View(x_app3)
View(x_app3[,c("exporter","importer","year","rta","rta_lead4","rta")])
View(x_app3[,c("exporter","importer","year","rta","rta_lead4","test")])
View(x_app3[,c("exporter","importer","year","rta","rta_lead4","test")] %>% arrange(exporter,year,importer))
View(x_app3[,c("exporter","importer","year","rta","rta_lead4","test")] %>% arrange(exporter,importer,year))
################################################################################
# MASTER file for data repository "An Introduction to Gravity in R"
# Ruben Dewitte
# March 2022
################################################################################
# SETUP -------------------------------------------------------------------
# Install (if necessary) and Load libraries
# source(here("code","01_packagemanagement.R"))
library(here) #easy file referencing, root is set at project root
# Setup - Define global variables -------------------------------------------------------------------
source(here("code","02_setup.R"))
# Dataprep - Prepare the data ----------------------------------------------------------------
source(here("code","04_dataprep.R"))
# Analysis ----------------------------------------------------------------
source(here("code","05_TraditionalGravityEstimates.R"))
source(here("code","06_DistancePuzzle.R"))
source(here("code","07_RTAs.R"))
renv::snapshot()
renv::clean
renv::clean()
exit
q()
